// Copyright (C) 2019, Flickering Inc. All rights reserved.
// Author: Kun Huang (huangkun1988@gmail.com)

class QiaoSuanTestCases {
    public static unfoldDistributive = [
        '25×(4+8)',
        '125×(8+40)',
        '125×(40-8)',
        '8×(12.5+0.25)',
        '1.25×(8-0.4)',
    ];

    public static foldDistributive = [
        '32×16+14×32',
        '99×13+13',
        '25×23+76×25+25',
        '144÷16+176÷16-96÷16',
        '34×17+15×17+49×3',
        '3.68×4.79+6.32×4.79',
        '5.7×99+5.7',
        '2.7×3.4+5.6×2.7+2.7',
        '17×5/8+3/8×17',
        '2/3×1/5+2/3×4/5',
        '24%×7/8+24%×1/5',
        '2/11×1/5+9/11÷5',
        '0.75×3/8+1/4÷8/3',
        '178×101-178',
        '83×102-83×2',
        '35×127-35×16-11×35',
        '17×230-23×70',
        '26.8×25.6-16.8×25.6',
        '37.5×101-37.5',
        '3/7×60-4×3/7',
        '37.5%-2/3×3/8',
    ];

    public static multiplyCommutative = [
        '3600÷25÷4',
        '3000÷125÷8',
        '3500÷14÷5',
        '32.6÷0.4÷2.5',
        '18.6÷25÷0.04',
        '1.96÷1.25÷8',
        '10÷3.2÷0.25÷1.25',
        '1÷0.32÷0.25÷1.25',
        '3/20×5/9÷5/9',
        '7×2/9×3/14',
        '555×12÷111',
        '125÷4×8',
        '55.5×1.2÷11.1',
        '12.5÷4×0.8',
    ];

    public static plusCommutative = [
        '732+580+268',
        '278+463+122+37',
        '1/3+1/2+2/3',
        '5_2/3+3_2/7+4_1/3',
        '12.06+5.07+2.94',
        '5.76+13.67+4.24+6.33',
        '586+325-86',
        '57-19+43-81',
        '273-46-73',

        '37.24+23.79-17.24',
        '37.24+23.79-16.24',
        '37.24-23.79+16.76',
        '5/8-8/13+3/8',

        '755+287+13',
        '755+287-87',
        '576-285+85',
        '273-27-73',
        '7.5+2.87-0.87',
        '27.3-12.7-7.3',
        '5.76-2.85+0.85',
        '5.76+2.85+0.15',
        '2-2/7-5/7',
        '3+1_3/4-3/4',
        '11_2/3-2.25-7_3/4',
    ];
    public static allTests() {
        return this.unfoldDistributive
            .concat(...this.foldDistributive)
            .concat(...this.multiplyCommutative)
            .concat(...this.plusCommutative)
            .filter((x) => x.indexOf('/') === -1);
    }
}
