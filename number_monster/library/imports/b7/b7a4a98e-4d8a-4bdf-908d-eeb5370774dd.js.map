{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\ExtensionDefine.ts"],"names":[],"mappings":";;;;AAAA,2DAA2D;AAC3D,6CAA6C;AAC7C,EAAE;AACF,gBAAgB;AAChB,mBAAmB","file":"","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Copyright (C) 2018, Flickering Inc. All rights reserved.\r\n// Author: Wende Luo (wendeluo@flickering.ai)\r\n//\r\n// 对原生的ts类拓展一些函数\r\n// 这个是定义文件。只定义，不做实现\r\n\r\ninterface Array<T> {\r\n\r\n    /**\r\n     * 添加一个数组\r\n     */\r\n    pushRange(items: Array<T>): void;\r\n\r\n    /**\r\n     * 随机其中一个元素\r\n     */\r\n    random(): T;\r\n\r\n    /**\r\n     * 确定数组中是否存在某个具体元素\r\n     */\r\n    contains(item: T): boolean;\r\n\r\n    /**\r\n     * 确定数组中是否存在满足特定 lambda 表达式的元素\r\n     */\r\n    contains(lambda: (item: T) => boolean): boolean;\r\n\r\n    /**\r\n     * 删除数组中某一项  \r\n     * 【在自身数组操作】\r\n     */\r\n    remove(item: T): void;\r\n\r\n    /**\r\n     * 删除数组中满足特定 lambda 表达式的元素  \r\n     * 【在自身数组操作】\r\n     */\r\n    remove(lambda: (item: T) => boolean): void;\r\n\r\n    /**\r\n     * 删除数组中某一项  \r\n     * 【返回新数组】\r\n     */\r\n    removed(item: T): Array<T>;\r\n\r\n    /**\r\n     * 删除数组中满足特定 lambda 表达式的元素  \r\n     * 【返回新数组】\r\n     */\r\n    removed(lambda: (item: T) => boolean): Array<T>;\r\n\r\n    /**\r\n     * 清空数组  \r\n     * 【在自身数组操作】\r\n     */\r\n    clear(): void;\r\n\r\n    /**\r\n     * 返回第0个元素\r\n     */\r\n    first(): T;\r\n\r\n    /**\r\n     * 寻找第一个符合 lambda 表达式的元素\r\n     */\r\n    first(lambda: (item: T) => boolean): T;\r\n\r\n    /**\r\n     * 返回数组最后一个元素\r\n     */\r\n    last(): T;\r\n\r\n    /**\r\n     * 寻找最后一个符合 lambda 表达式的元素\r\n     */\r\n    last(lambda?: (item: T) => boolean): T;\r\n\r\n    /**\r\n     * 返回数组中的最大值（元素都为number时有效）\r\n     */\r\n    max(): T;\r\n\r\n    /**\r\n     * 将lambda作为转换函数作用于每个元素上，返回最大结果的那个元素\r\n     * @param lambda 转换函数\r\n     */\r\n    max<R>(lambda: (item: T) => R): T;\r\n\r\n    /**\r\n     * 返回数组中的最小值（元素都为number时有效）\r\n     */\r\n    min(): T;\r\n\r\n    /**\r\n     * 将lambda作为转换函数作用于每个元素上，返回最小结果的那个元素\r\n     * @param lambda 转换函数\r\n     */\r\n    min<R>(lambda: (item: T) => R): T;\r\n\r\n    /**\r\n     * 对数值所有元素进行求和（如果元素不是number类型则抛出异常）\r\n     */\r\n    sum(): number;\r\n\r\n    /**\r\n     * 对数组元素某个字段进行求和。\r\n     * @example ```typescript\r\n       // 对数组元素的age字段求和\r\n       array.sum(item => item.age);\r\n\r\n       // age > 20 的元素求和\r\n       array.sum(item => {\r\n           if(item.age > 20) {\r\n               return item.age;\r\n           } else {\r\n               return 0;\r\n           }\r\n       });\r\n\r\n       ```\r\n     */\r\n    sum(lambda: (item: T) => number): number;\r\n\r\n    /**\r\n     * 将序列中的每个元素投影到新表中\r\n     */\r\n    select<R>(lambda: (item: T) => R): Array<R>;\r\n\r\n    /**\r\n     * 筛选出满足条件的元素\r\n     */\r\n    where(lambda: (item: T) => boolean): Array<T>;\r\n\r\n    /**\r\n     * 统计数组中满足条件的元素数量\r\n     */\r\n    count(lambda: (item: T) => boolean): number;\r\n\r\n    /**\r\n     * 将数组转化为Object\r\n     * 将lambda作为转换函数作用于每个元素上，构建Dictionary的key\r\n     * @param lambda key的转换函数\r\n     */\r\n    toDictionary(lambda: (item: T) => string | number): { [key: string]: T };\r\n\r\n    /**\r\n     * 克隆一个数组\r\n     */\r\n    clone(): Array<T>;\r\n\r\n    /**\r\n     * 将数组【本身】随机打乱\r\n     */\r\n    shuffle(): void;\r\n\r\n    /**\r\n     * 【返回】随机打乱后的数组\r\n     */\r\n    shuffled(): Array<T>;\r\n\r\n    /**\r\n     * 升序排列\r\n     * 【在自身数组操作】\r\n     */\r\n    sortAsc(): void;\r\n\r\n    /**\r\n     * 升序排列（根据对象某个字段作为参考）  \r\n     * 【在自身数组操作】\r\n     * @param lambda 排序字段，可以传多个字段\r\n     */\r\n    sortAsc<R extends (string | number)>(...lambda: Array<(item: T) => R>): void;\r\n\r\n    /**\r\n     * 升序排列  \r\n     * 【返回新数组】\r\n     */\r\n    sortedAsc(): Array<T>;\r\n\r\n    /**\r\n     * 升序排列（根据对象某个字段作为参考）  \r\n     * 【返回新数组】\r\n     * @param lambda 排序字段，可以传多个字段\r\n     */\r\n    sortedAsc<R extends (string | number)>(...lambda: Array<(item: T) => R>): Array<T>;\r\n\r\n    /**\r\n     * 降序排列  \r\n     * 【在自身数组操作】\r\n     */\r\n    sortDesc(): void;\r\n\r\n    /**\r\n     * 降序排列（根据对象某个字段作为参考）  \r\n     * 【在自身数组操作】\r\n     * @param lambda 排序字段，可以传多个字段\r\n     */\r\n    sortDesc<R extends (string | number)>(...lambda: Array<(item: T) => R>): void;\r\n\r\n    /**\r\n     * 降序排列\r\n     * 【返回新数组】\r\n     */\r\n    sortedDesc(): Array<T>;\r\n\r\n    /**\r\n     * 降序排列（根据对象某个字段作为参考）  \r\n     * 【返回新数组】\r\n     * @param lambda 排序字段，可以传多个字段\r\n     */\r\n    sortedDesc<R extends (string | number)>(...lambda: Array<(item: T) => R>): Array<T>;\r\n}"]}